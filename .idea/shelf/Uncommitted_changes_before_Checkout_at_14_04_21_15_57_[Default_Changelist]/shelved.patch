Index: app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\"\n    package=\"com.example.corridafacil\" >\n\n    <uses-permission android:name=\"android.permission.ACCESS_FINE_LOCATION\" />\n    <uses-permission android:name=\"android.permission.INTERNET\"/>\n    <uses-permission android:name=\"android.permission.READ_EXTERNAL_STORAGE\"/>\n    <uses-permission android:name=\"android.permission.WRITE_EXTERNAL_STORAGE\"/>\n\n    <application\n        android:allowBackup=\"true\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.CorridaFacil\" >\n        <activity android:name=\".Authentication.Register.RegisterForm03Activity\" >\n        </activity>\n        <activity android:name=\".Authentication.Register.RegisterForm02Activity\" />\n        <activity android:name=\".Authentication.Register.RegisterForm01Activity\" />\n        <!--\n             The API key for Google Maps-based APIs is defined as a string resource.\n             (See the file \"res/values/google_maps_api.xml\").\n             Note that the API key is linked to the encryption key used to sign the APK.\n             You need a different API key for each encryption key, including the release key that is used to\n             sign the APK for publishing.\n             You can define the keys for the debug and release targets in src/debug/ and src/release/.\n        -->\n        <meta-data\n            android:name=\"com.google.android.geo.API_KEY\"\n            android:value=\"@string/google_maps_key\" />\n\n        <activity\n            android:name=\".Mapa.MapsActivity\"\n            android:label=\"@string/title_activity_maps\" /> <!-- <activity android:name=\".Authentication.ui.login.LoginActivity\" android:label=\"@string/title_activity_login\"/> -->\n        <activity android:name=\".MainActivity\" />\n        <activity\n            android:name=\".Authentication.ui.login.LoginActivity\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.CorridaFacil.NoActionBar\" >\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n        <service\n            android:name=\".Services.FirebaseMenssaging.FirebaseMenssagingServices\"\n            android:exported=\"false\">\n            <intent-filter>\n                <action android:name=\"com.google.firebase.MESSAGING_EVENT\" />\n            </intent-filter>\n        </service>\n    </application>\n\n</manifest>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/AndroidManifest.xml	(revision e15f09e5c0a6afa2c81467df5ff571931127bdec)
+++ app/src/main/AndroidManifest.xml	(date 1617988694000)
@@ -15,10 +15,10 @@
         android:roundIcon="@mipmap/ic_launcher_round"
         android:supportsRtl="true"
         android:theme="@style/Theme.CorridaFacil" >
-        <activity android:name=".Authentication.Register.RegisterForm03Activity" >
+        <activity android:name=".Authentication.Register.SecondFormActivity" >
         </activity>
-        <activity android:name=".Authentication.Register.RegisterForm02Activity" />
-        <activity android:name=".Authentication.Register.RegisterForm01Activity" />
+        <activity android:name=".Authentication.Register.FirstFormActivity" />
+        <activity android:name=".Authentication.Register.ThirdForm01Activity" />
         <!--
              The API key for Google Maps-based APIs is defined as a string resource.
              (See the file "res/values/google_maps_api.xml").
Index: app/src/main/java/com/example/corridafacil/Controllers/PassageiroController.kt
===================================================================
--- app/src/main/java/com/example/corridafacil/Controllers/PassageiroController.kt	(date 1617903925000)
+++ app/src/main/java/com/example/corridafacil/Controllers/PassageiroController.kt	(date 1617903925000)
@@ -0,0 +1,21 @@
+package com.example.corridafacil.Controllers
+
+import android.content.Context
+import android.widget.Toast
+import com.example.corridafacil.Models.Passageiro
+import com.google.firebase.database.DatabaseReference
+import com.google.firebase.database.FirebaseDatabase
+import com.google.firebase.database.ktx.database
+import com.google.firebase.ktx.Firebase
+import java.security.AccessControlContext
+
+
+class PassageiroController {
+    private lateinit var database: DatabaseReference
+
+
+    fun savePassageiroInDataBase(userId: String,passageiro: Passageiro) {
+        database = FirebaseDatabase.getInstance().reference
+        database.child("Passageiros").child(userId).setValue(passageiro)
+    }
+}
\ No newline at end of file
Index: app/src/main/java/com/example/corridafacil/Models/Passageiro.kt
===================================================================
--- app/src/main/java/com/example/corridafacil/Models/Passageiro.kt	(date 1618426525000)
+++ app/src/main/java/com/example/corridafacil/Models/Passageiro.kt	(date 1618426525000)
@@ -0,0 +1,27 @@
+package com.example.corridafacil.Models
+
+data class Passageiro {
+    var id: String? = null
+    var nome: String? = null
+    var sobrenome: String? = null
+    var email: String? = null
+    var telefone: String? = null
+    var senha: String? = null
+    var foto: String? = null
+    var ativado: Boolean? = null
+    var tokenPassageiro: String? = null
+
+    constructor() {}
+    constructor(id: String?, nome: String?, sobrenome: String?, email: String?, telefone: String?, senha: String?, foto: String?, ativado: Boolean?, tokenPassageiro: String?) {
+        this.id = id
+        this.nome = nome
+        this.sobrenome = sobrenome
+        this.email = email
+        this.telefone = telefone
+        this.senha = senha
+        this.foto = foto
+        this.ativado = ativado
+        this.tokenPassageiro = tokenPassageiro
+    }
+
+}
\ No newline at end of file
Index: app/src/main/java/com/example/corridafacil/Authentication/ui/login/LoginActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.corridafacil.Authentication.ui.login\n\nimport android.app.Activity\nimport android.content.Intent\nimport androidx.lifecycle.Observer\nimport androidx.lifecycle.ViewModelProvider\nimport android.os.Bundle\nimport androidx.annotation.StringRes\nimport androidx.appcompat.app.AppCompatActivity\nimport android.text.Editable\nimport android.text.TextWatcher\nimport android.view.View\nimport android.view.inputmethod.EditorInfo\nimport android.widget.Button\nimport android.widget.EditText\nimport android.widget.ProgressBar\nimport android.widget.Toast\nimport com.example.corridafacil.Authentication.Register.RegisterForm01Activity\nimport com.example.corridafacil.Authentication.Register.RegisterForm02Activity\nimport com.example.corridafacil.Authentication.Register.RegisterForm03Activity\n\nimport com.example.corridafacil.R\n\nclass LoginActivity : AppCompatActivity() {\n\n    private lateinit var loginViewModel: LoginViewModel\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n        setContentView(R.layout.activity_login)\n\n        val username = findViewById<EditText>(R.id.username)\n        val password = findViewById<EditText>(R.id.password)\n        val login = findViewById<Button>(R.id.login)\n        val loading = findViewById<ProgressBar>(R.id.loading)\n        val registerButton = findViewById<Button>(R.id.button3)\n\n        loginViewModel = ViewModelProvider(this, LoginViewModelFactory())\n                .get(LoginViewModel::class.java)\n\n        loginViewModel.loginFormState.observe(this@LoginActivity, Observer {\n            val loginState = it ?: return@Observer\n\n            // disable login button unless both username / password is valid\n            login.isEnabled = loginState.isDataValid\n\n            if (loginState.usernameError != null) {\n                username.error = getString(loginState.usernameError)\n            }\n            if (loginState.passwordError != null) {\n                password.error = getString(loginState.passwordError)\n            }\n        })\n\n        loginViewModel.loginResult.observe(this@LoginActivity, Observer {\n            val loginResult = it ?: return@Observer\n\n            loading.visibility = View.GONE\n            if (loginResult.error != null) {\n                showLoginFailed(loginResult.error)\n            }\n            if (loginResult.success != null) {\n                updateUiWithUser(loginResult.success)\n            }\n            setResult(Activity.RESULT_OK)\n\n            //Complete and destroy login activity once successful\n            finish()\n        })\n\n        username.afterTextChanged {\n            loginViewModel.loginDataChanged(\n                    username.text.toString(),\n                    password.text.toString()\n            )\n        }\n\n        password.apply {\n            afterTextChanged {\n                loginViewModel.loginDataChanged(\n                        username.text.toString(),\n                        password.text.toString()\n                )\n            }\n\n            setOnEditorActionListener { _, actionId, _ ->\n                when (actionId) {\n                    EditorInfo.IME_ACTION_DONE ->\n                        loginViewModel.login(\n                                username.text.toString(),\n                                password.text.toString()\n                        )\n                }\n                false\n            }\n\n            login.setOnClickListener {\n                loading.visibility = View.VISIBLE\n                loginViewModel.login(username.text.toString(), password.text.toString())\n            }\n            registerButton.setOnClickListener {\n                val irParaFormsRegister = Intent(this@LoginActivity, RegisterForm01Activity::class.java)\n                startActivity(irParaFormsRegister)\n            }\n        }\n    }\n\n    private fun updateUiWithUser(model: LoggedInUserView) {\n        val welcome = getString(R.string.welcome)\n        val displayName = model.displayName\n        // TODO : initiate successful logged in experience\n        Toast.makeText(\n                applicationContext,\n                \"$welcome $displayName\",\n                Toast.LENGTH_LONG\n        ).show()\n    }\n\n    private fun showLoginFailed(@StringRes errorString: Int) {\n        Toast.makeText(applicationContext, errorString, Toast.LENGTH_SHORT).show()\n    }\n}\n\n/**\n * Extension function to simplify setting an afterTextChanged action to EditText components.\n */\nfun EditText.afterTextChanged(afterTextChanged: (String) -> Unit) {\n    this.addTextChangedListener(object : TextWatcher {\n        override fun afterTextChanged(editable: Editable?) {\n            afterTextChanged.invoke(editable.toString())\n        }\n\n        override fun beforeTextChanged(s: CharSequence, start: Int, count: Int, after: Int) {}\n\n        override fun onTextChanged(s: CharSequence, start: Int, before: Int, count: Int) {}\n    })\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/example/corridafacil/Authentication/ui/login/LoginActivity.kt	(revision e15f09e5c0a6afa2c81467df5ff571931127bdec)
+++ app/src/main/java/com/example/corridafacil/Authentication/ui/login/LoginActivity.kt	(date 1617989084000)
@@ -15,9 +15,8 @@
 import android.widget.EditText
 import android.widget.ProgressBar
 import android.widget.Toast
-import com.example.corridafacil.Authentication.Register.RegisterForm01Activity
-import com.example.corridafacil.Authentication.Register.RegisterForm02Activity
-import com.example.corridafacil.Authentication.Register.RegisterForm03Activity
+import com.example.corridafacil.Authentication.Register.FirstFormActivity
+import com.example.corridafacil.Authentication.Register.ThirdForm01Activity
 
 import com.example.corridafacil.R
 
@@ -100,7 +99,7 @@
                 loginViewModel.login(username.text.toString(), password.text.toString())
             }
             registerButton.setOnClickListener {
-                val irParaFormsRegister = Intent(this@LoginActivity, RegisterForm01Activity::class.java)
+                val irParaFormsRegister = Intent(this@LoginActivity, FirstFormActivity::class.java)
                 startActivity(irParaFormsRegister)
             }
         }
Index: app/google-services.json
===================================================================
--- app/google-services.json	(date 1617819030000)
+++ app/google-services.json	(date 1617819030000)
@@ -0,0 +1,114 @@
+{
+  "project_info": {
+    "project_number": "47994110418",
+    "firebase_url": "https://corridafacil-67530.firebaseio.com",
+    "project_id": "corridafacil-67530",
+    "storage_bucket": "corridafacil-67530.appspot.com"
+  },
+  "client": [
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:47994110418:android:e536b3a6c71b90d4ef880b",
+        "android_client_info": {
+          "package_name": "com.example.cf02"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "47994110418-lf5pfch8isku0aqiqeq2aqepd4u9d2np.apps.googleusercontent.com",
+          "client_type": 1,
+          "android_info": {
+            "package_name": "com.example.cf02",
+            "certificate_hash": "0ba8013bef92df683cd3f8a2e26627f71ccce7f2"
+          }
+        },
+        {
+          "client_id": "47994110418-jgu3fg4am21cc38ke55n8g0tst721t3h.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyDDqItRkAE3IJ8J2PtfIwl-XwujGyUQvP0"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "47994110418-jgu3fg4am21cc38ke55n8g0tst721t3h.apps.googleusercontent.com",
+              "client_type": 3
+            }
+          ]
+        }
+      }
+    },
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:47994110418:android:357f9a8bcbbeb00bef880b",
+        "android_client_info": {
+          "package_name": "com.example.cfm02"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "47994110418-jgu3fg4am21cc38ke55n8g0tst721t3h.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyDDqItRkAE3IJ8J2PtfIwl-XwujGyUQvP0"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "47994110418-jgu3fg4am21cc38ke55n8g0tst721t3h.apps.googleusercontent.com",
+              "client_type": 3
+            }
+          ]
+        }
+      }
+    },
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:47994110418:android:648257e4cf03105aef880b",
+        "android_client_info": {
+          "package_name": "com.example.corridafacil"
+        }
+      },
+      "oauth_client": [
+        {
+          "client_id": "47994110418-ff4tqksqmtn52qsq9a9s4tpi6fta1unq.apps.googleusercontent.com",
+          "client_type": 1,
+          "android_info": {
+            "package_name": "com.example.corridafacil",
+            "certificate_hash": "fceb85ab5425e8e05835153a56a83ebc0becd44b"
+          }
+        },
+        {
+          "client_id": "47994110418-jgu3fg4am21cc38ke55n8g0tst721t3h.apps.googleusercontent.com",
+          "client_type": 3
+        }
+      ],
+      "api_key": [
+        {
+          "current_key": "AIzaSyDDqItRkAE3IJ8J2PtfIwl-XwujGyUQvP0"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": [
+            {
+              "client_id": "47994110418-jgu3fg4am21cc38ke55n8g0tst721t3h.apps.googleusercontent.com",
+              "client_type": 3
+            }
+          ]
+        }
+      }
+    }
+  ],
+  "configuration_version": "1"
+}
\ No newline at end of file
Index: build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Top-level build file where you can add configuration options common to all sub-projects/modules.\nbuildscript {\n    ext.kotlin_version = \"1.3.72\"\n    repositories {\n        google()\n        jcenter()\n    }\n    dependencies {\n        classpath \"com.android.tools.build:gradle:4.1.2\"\n        classpath \"org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version\"\n        classpath 'com.google.gms:google-services:4.3.5'\n        // NOTE: Do not place your application dependencies here; they belong\n        // in the individual module build.gradle files\n    }\n}\n\nallprojects {\n    repositories {\n        google()\n        jcenter()\n    }\n}\n\ntask clean(type: Delete) {\n    delete rootProject.buildDir\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- build.gradle	(revision e15f09e5c0a6afa2c81467df5ff571931127bdec)
+++ build.gradle	(date 1617733793000)
@@ -6,9 +6,9 @@
         jcenter()
     }
     dependencies {
-        classpath "com.android.tools.build:gradle:4.1.2"
-        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
+        classpath "com.android.tools.build:gradle:4.1.3"
         classpath 'com.google.gms:google-services:4.3.5'
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
     }
Index: app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>plugins {\n    id 'com.android.application'\n    id 'kotlin-android'\n    id 'com.google.gms.google-services'\n}\n\nandroid {\n    compileSdkVersion 30\n    buildToolsVersion \"30.0.3\"\n\n    defaultConfig {\n        applicationId \"com.example.corridafacil\"\n        minSdkVersion 16\n        targetSdkVersion 30\n        versionCode 1\n        versionName \"1.0\"\n        multiDexEnabled true\n        testInstrumentationRunner \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            minifyEnabled false\n            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'\n        }\n    }\n    compileOptions {\n        sourceCompatibility JavaVersion.VERSION_1_8\n        targetCompatibility JavaVersion.VERSION_1_8\n    }\n    kotlinOptions {\n        jvmTarget = '1.8'\n    }\n}\n\ndependencies {\n\n    implementation \"org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version\"\n    implementation 'androidx.core:core-ktx:1.3.2'\n    implementation 'androidx.appcompat:appcompat:1.2.0'\n    implementation 'com.google.android.material:material:1.3.0'\n    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'\n    implementation 'androidx.navigation:navigation-fragment:2.3.4'\n    implementation 'androidx.navigation:navigation-ui:2.3.4'\n    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.3.1'\n    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'\n    implementation 'androidx.navigation:navigation-fragment-ktx:2.3.4'\n    implementation 'androidx.navigation:navigation-ui-ktx:2.3.4'\n    implementation 'com.google.android.gms:play-services-maps:17.0.0'\n    implementation 'com.google.android.gms:play-services-location:18.0.0'\n    implementation 'com.karumi:dexter:6.2.2'\n    implementation 'androidx.annotation:annotation:1.2.0'\n    implementation 'androidx.multidex:multidex:2.0.1'\n    implementation 'com.google.firebase:firebase-storage:19.2.1'\n    testImplementation 'junit:junit:4.+'\n    androidTestImplementation 'androidx.test.ext:junit:1.1.2'\n    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'\n    // Import the BoM for the Firebase platform\n    implementation platform('com.google.firebase:firebase-bom:26.6.0')\n    // Firebase Authentication library\n    // When using the BoM, you don't specify versions in Firebase library dependencies\n    implementation 'com.google.firebase:firebase-auth-ktx'\n    // Firebase: Realtime Database library\n    implementation 'com.google.firebase:firebase-database-ktx'\n    // Firebase: Cloud Storage library\n    implementation 'com.google.firebase:firebase-storage-ktx'\n    // Firebase: Messaging\n    implementation 'com.google.firebase:firebase-messaging-ktx'\n    // CCP Code Country\n    // Add CCP of detected code country\n    implementation 'com.hbb20:ccp:2.4.7'\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/build.gradle	(revision e15f09e5c0a6afa2c81467df5ff571931127bdec)
+++ app/build.gradle	(date 1617820670000)
@@ -52,6 +52,7 @@
     implementation 'androidx.annotation:annotation:1.2.0'
     implementation 'androidx.multidex:multidex:2.0.1'
     implementation 'com.google.firebase:firebase-storage:19.2.1'
+    implementation 'com.google.firebase:firebase-database:19.7.0'
     testImplementation 'junit:junit:4.+'
     androidTestImplementation 'androidx.test.ext:junit:1.1.2'
     androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
